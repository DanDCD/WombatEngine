#pragma once
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glad/glad.h>

struct CameraParams
{
    /// @brief the position of the camera in world space
    glm::vec3 cameraPos;

    /// @brief the direction the camera is facing
    glm::vec3 cameraFront;

    /// @brief the direction that is 'up' relative to the camera
    glm::vec3 cameraUp;

    /// @brief the direction that is 'right' relative to the camera
    glm::vec3 cameraRight;

    /// @brief euler angle for rotating left/right along the y-axis
    float yaw;

    /// @brief the euler angler for rotating up/down along the x-axis
    float pitch;

    /// @brief the speed of the camera
    float movementSpeed;

    /// @brief how sensitive the camera view is to mouse movement
    float mouseSensitivity;

    /// @brief how zoomed in the camera is
    float zoom;

    /// @brief default constructor
    CameraParams();

    /// @brief constructor
    /// @param pos
    /// @param front
    /// @param up
    /// @param yaw
    /// @param pitch
    /// @param speed
    /// @param sensitivity
    /// @param zoom
    CameraParams(const glm::vec3 &pos,
                 float yaw, float pitch, float speed, float sensitivity, float zoom);

    /// @brief updates front, right, and up directions
    void updateDirections();
};

class Camera
{
public:
    enum Movement
    {
        FORWARD,
        BACKWARD,
        LEFT,
        RIGHT
    };

    /// @brief constructor
    /// @param cameraParams the parameters for this camera
    Camera(CameraParams &cameraParams);

    /// @brief get the view matrix generated by this camera
    /// @return the view matrix
    glm::mat4 getViewMatrix();

    void processKeyboard(Movement direction, float deltaTime);

    void processMouseMovement(float xoffset, float yoffset, GLboolean constrainPitch = true);

    void processMouseScroll(float yoffset);

private:
    CameraParams cameraParams;
};